
/*
leetcode第17.16题：按摩师
一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。

注意：本题相对原题稍作改动

 

示例 1：

输入： [1,2,3,1]
输出： 4
解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。
示例 2：

输入： [2,7,9,3,1]
输出： 12
解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。
示例 3：

输入： [2,1,4,5,3,1,1,3]
输出： 12
解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/the-masseuse-lcci
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


/*

思路：动态规划
1. 让dp[i][0]表示前i个预约，第i个预约不接。dp[i][1]表示前i个预约，第i个预约接
2. 对于dp[i][0]来说，由于第i个预约不接，那么第i-1个预约接或者不接都可以，所有dp[i][0]可以从两个状态转移过来：
	dp[i-1][0]或dp[i-1][1]，所以dp[i][0]的转移方程为：dp[i][0]=max(dp[i][0],dp[i][1])
3. 对于dp[i][1]来说，因为第i个接，所以第i-1个不能接，所以它只能从dp[i-1][0]转移过来，因此，他的转移方程为：
	dp[i][1] = dp[i-1][0]+nums[i]. nums[i]表示第i个的时长，因为第i个是接的，所以得加上。
4. 最后答案即为 max(dp[n][0],dp[n][1])max(dp[n][0],dp[n][1]) ，其中 nn 表示预约的个数。

再回来看转移方程，我们发现计算 dp[i][0/1]dp[i][0/1] 时，只与前一个状态 dp[i-1][0/1]dp[i−1][0/1] 有关，
所以我们可以不用开数组，只用两个变量 dp0，dp1 分别存储 dp[i-1][0]dp[i−1][0] 和 dp[i-1][1]dp[i−1][1] 的答案，
然后去转移更新答案即可。

*/


public class Massage{
	public int massage(int[] nums) {
        int n = nums.length;
        if(n==0){
            return 0;
        }
        int dp0 = 0; // dp0第一个不接
        int dp1 = nums[0]; // 第一个接
        for(int i=1;i<n;i++){
            int tdp0 = Math.max(dp0,dp1);
            int tdp1 = dp0+nums[i];
            dp0 = tdp0;
            dp1 = tdp1;
        }
        return Math.max(dp0,dp1);
    }
}